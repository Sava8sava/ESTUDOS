<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.9.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.9.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="facing" val="south"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="2.0"/>
    <comp lib="0" loc="(120,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(140,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(160,100)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(160,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(160,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(510,110)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(530,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp loc="(480,130)" name="JK_Mestre_Escravo">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(120,200)" to="(250,200)"/>
    <wire from="(140,150)" to="(260,150)"/>
    <wire from="(160,100)" to="(170,100)"/>
    <wire from="(160,230)" to="(170,230)"/>
    <wire from="(160,270)" to="(170,270)"/>
    <wire from="(170,100)" to="(170,130)"/>
    <wire from="(170,130)" to="(260,130)"/>
    <wire from="(170,220)" to="(170,230)"/>
    <wire from="(170,220)" to="(240,220)"/>
    <wire from="(170,240)" to="(170,270)"/>
    <wire from="(170,240)" to="(250,240)"/>
    <wire from="(240,190)" to="(240,220)"/>
    <wire from="(240,190)" to="(260,190)"/>
    <wire from="(250,170)" to="(250,200)"/>
    <wire from="(250,170)" to="(260,170)"/>
    <wire from="(250,210)" to="(250,240)"/>
    <wire from="(250,210)" to="(260,210)"/>
    <wire from="(480,130)" to="(490,130)"/>
    <wire from="(480,150)" to="(500,150)"/>
    <wire from="(490,110)" to="(490,130)"/>
    <wire from="(490,110)" to="(510,110)"/>
    <wire from="(500,140)" to="(500,150)"/>
    <wire from="(500,140)" to="(530,140)"/>
  </circuit>
  <vhdl name="JK_Mestre_Escravo">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity JK_Mestre_Escravo is
    Port (
        J       : in STD_LOGIC;          -- Entrada J
        K       : in STD_LOGIC;          -- Entrada K
        CLK     : in STD_LOGIC;          -- Clock
        PRESET  : in STD_LOGIC;          -- Preset assíncrono
        CLEAR   : in STD_LOGIC;          -- Clear assíncrono
        Q       : out STD_LOGIC;         -- Saída Q
        Q_bar   : out STD_LOGIC          -- Saída Q barrado
    );
end JK_Mestre_Escravo;

architecture Behavioral of JK_Mestre_Escravo is
    signal Q_mestre  : STD_LOGIC := '0'; -- Saída do mestre
    signal Q_escravo : STD_LOGIC := '0'; -- Saída do escravo
begin

    -- Processo para o Mestre
    process(CLK, PRESET, CLEAR)
    begin
        if (PRESET = '1') then              -- Preset assíncrono
            Q_mestre &lt;= '1';
        elsif (CLEAR = '1') then            -- Clear assíncrono
            Q_mestre &lt;= '0';
        elsif (rising_edge(CLK)) then       -- Bordo de subida do clock
            case (J &amp; K) is
                when "00" =&gt; Q_mestre &lt;= Q_mestre;  -- Sem alteração
                when "01" =&gt; Q_mestre &lt;= '0';       -- Reset
                when "10" =&gt; Q_mestre &lt;= '1';       -- Set
                when "11" =&gt; Q_mestre &lt;= not Q_mestre; -- Toggle
                when others =&gt; null;
            end case;
        end if;
    end process;

    -- Processo para o Escravo
    process(CLK, PRESET, CLEAR)
    begin
        if (PRESET = '1') then              -- Preset assíncrono
            Q_escravo &lt;= '1';
        elsif (CLEAR = '1') then            -- Clear assíncrono
            Q_escravo &lt;= '0';
        elsif (falling_edge(CLK)) then      -- Bordo de descida do clock
            Q_escravo &lt;= Q_mestre;          -- Escravo segue o mestre
        end if;
    end process;

    -- Atribuições das saídas
    Q &lt;= Q_escravo;
    Q_bar &lt;= not Q_escravo;

end Behavioral;
</vhdl>
  <vhdl name="guefhgiuhfg">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY guefhgiuhfg IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;                    -- input bit example
    val        : IN  std_logic_vector(3 DOWNTO 0); -- input vector example
  ------------------------------------------------------------------------------
  --Insert output ports below
    max        : OUT std_logic;                    -- output bit example
    cpt        : OUT std_logic_vector(3 DOWNTO 0)  -- output vector example
    );
END guefhgiuhfg;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF guefhgiuhfg IS

BEGIN


END TypeArchitecture;
</vhdl>
</project>
